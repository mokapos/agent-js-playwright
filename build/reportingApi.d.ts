import { Attribute } from './models';
import { STATUSES, LOG_LEVELS } from './constants';
import { Attachment } from './models/reporting';
export declare const ReportingApi: {
    addAttributes: (attrs: Attribute[], suite?: string) => void;
    setDescription: (description: string, suite?: string) => void;
    setTestCaseId: (testCaseId: string, suite?: string) => void;
    setStatus: (status: keyof typeof STATUSES, suite?: string) => void;
    setStatusPassed: (suite?: string) => void;
    setStatusFailed: (suite?: string) => void;
    setStatusSkipped: (suite?: string) => void;
    setStatusStopped: (suite?: string) => void;
    setStatusInterrupted: (suite?: string) => void;
    setStatusCancelled: (suite?: string) => void;
    setStatusInfo: (suite?: string) => void;
    setStatusWarn: (suite?: string) => void;
    setLaunchStatus: (status: keyof typeof STATUSES) => void;
    setLaunchStatusPassed: () => void;
    setLaunchStatusFailed: () => void;
    setLaunchStatusSkipped: () => void;
    setLaunchStatusStopped: () => void;
    setLaunchStatusInterrupted: () => void;
    setLaunchStatusCancelled: () => void;
    setLaunchStatusInfo: () => void;
    setLaunchStatusWarn: () => void;
    log: (level?: LOG_LEVELS, message?: string, file?: Attachment, suite?: string) => void;
    launchLog: (level?: LOG_LEVELS, message?: string, file?: Attachment) => void;
    trace: (message: string, file?: Attachment, suite?: string) => void;
    debug: (message: string, file?: Attachment, suite?: string) => void;
    info: (message: string, file?: Attachment, suite?: string) => void;
    warn: (message: string, file?: Attachment, suite?: string) => void;
    error: (message: string, file?: Attachment, suite?: string) => void;
    fatal: (message: string, file?: Attachment, suite?: string) => void;
    launchTrace: (message: string, file?: Attachment) => void;
    launchDebug: (message: string, file?: Attachment) => void;
    launchInfo: (message: string, file?: Attachment) => void;
    launchWarn: (message: string, file?: Attachment) => void;
    launchError: (message: string, file?: Attachment) => void;
    launchFatal: (message: string, file?: Attachment) => void;
};
